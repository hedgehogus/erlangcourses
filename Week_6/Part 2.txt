OTP: The Open Telecom Platform

In this activity we look at OTP - the Open Telecom Platform that powers most Erlang systems with its reusable generic components.


3.8 

OTP overview and principles 

We’ll start this activity on OTP with a look at the assumptions behind OTP, plus the design itself.

Our initial discussion concerns the principles behind the design of OTP - “deskilling” the construction 
of robust concurrent systems. We’ll think about generic components - based on behaviours - and the particular 
role of supervisors. This should all build on things we’ve seen already, but it’s the first time that the principles 
get analysed and developed together.

Use the comments on this step to share your initial thoughts on the design and principles of OTP.

In the next step, we’ll hear from Joe Armstrong about separating the generic and the specific, 
after which we’ll look at the gen_server in more detail.


3.9

The road to generics  

In this step, Joe Armstrong discusses the split between the generic and specific aspects of a program.

The gen_server is explained in more detail, by means of a simple example: Joe introduces a ‘counter’ program, 
showing the details of the implementation of the server and the client, and discussing the underlying approach 
and why it is organised this way.

In the next step we’ll continue to explore the idea of a gen_server, and then you’ll get
a chance to build a gen_server for yourself.


3.10

OTP - 'gen_server'  

In this step, Simon uses the example of an echo server to further explore the concept of a gen_server.

We’ll look at the rely/guarantee relationship between components: a gen_server relies on having the
 callback functions init for the initial state, and handle_call and handle_cast for synchronous 
 and asynchronous messages; and, given these, it will implement the functions start_link to start the server, 
 call and cast to make a synchronous call or send an asynchronous message, and stop to stop the server.

This step is a preliminary to you yourself making a gen_server version of the frequency server, which you’ll do in the next step.

There are two supporting files, echo.erl and gecho.erl, available (as zip files) under ‘Downloads’ below.


3.11

The frequency server as a gen_server  View 15 comments
This exercise will give you a chance to implement the frequency server as a gen_server, with the 
same interface as for the “raw Erlang” implementation.

A template module gf.erl for you to use is available from the foot of this page, and the 
supporting file frequency2.erl is also avaiable. There is a further file, frequency_gen_server.erl, 
which provides our solution to this exercise - please do attempt this exercise yourself first, before referring and comparing to our solution.

Use the comments on this step to share your approaches and solutions, and then in the next 
step we’ll discuss how you’ve got on with this exercise.

Implementing the gen_server behaviour
To implement a particular behaviour, such as gen_server, the module needs to contain a behaviour declaration, thus:

-behaviour(gen_server).
This should follow the module declaration, and “behaviour” can be spelled with or without a “u”.

It is also necessary to export the interface functions, as well as the implementations 
of the functions in the callback interface, which we turn to next.

The interface functions
The interface presented to the outside world by the frequency server consists of these four functions:

start/0 start the frequency server
stop/0 shut down the frequency server
allocate/0 allocate a frequency, if one is available, and return an error value if not
deallocate/1 deallocate the given frequency
These should be implemented as calls to functions in the gen_server module, 
including start_link/4 (start the server), call/2 (synchronous message handling), cast/2 (asynchronous message handling) and so on.

The callback functions
For the gen_server to have the specific behaviour of the frequency server, these callback functions need to be implemented:

init/1 initialise the state of the server, based on the argument
terminate/2 code performed on termination, dependent on the reason for termination and the current state.
handle_cast/2 handle a message asynchronously, taking the message and current state as arguments
handle_call/3 handle a message synchronously, taking the message, the PId of the sender and current state as arguments
Call or cast?
Have you implemented stop/0 and deallocate/0 as calls or casts? The natural way 
of doing so would be as calls, since we’ve written them with a reply, but they don’t need to have a reply; 
so, if you have done this, try rewriting them as casts. If you have already done this, how would you write them as calls?

Adding additional functionality
If you want to take things further, add a function report/0 that reports the numbers of free and allocated frequencies: 
will you implement this as a call or a cast?

You could also add a function to introduce new frequencies to the server: the reply should confirm the addition, 
or give an error if a frequency is duplicated in the addition. Do you use call or cast for this functionality?



3.12

How did you get on with the previous exercise, writing a gen_server version of the frequency server?

Use this discussion to comment on any particularly interesting approaches or solutions that you have applied, 
or that you have seen from others. Were there any common problems or mistakes? What do you think are the ‘lessons learned’?

Our own solution, frequency_gen_server.erl, is provided on the previous step.

That concludes this activity on OTP. In the next activity we’ll hear more about OTP from Francesco Cesarini, 
founder and Technical Director of Erlang Solutions.


