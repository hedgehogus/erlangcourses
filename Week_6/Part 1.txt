3.1

Introduction to Week 3  View 0 comments
Welcome to Week 3.

This week we’ll concentrate on how Erlang gets its scalability, which has three facets: multicore, distribution and OTP.

We’ll start with the multicore implementation of the BEAM virtual machine, which allows processes to run concurrently 
on the different cores of a multicore device. On a bigger scale, distributed Erlang allows us to get scalability 
by adding extra computing nodes to a system. Finally, we’ll also introduce the open telecom platform – OTP – which
provides generic implementations of common patterns including “server” and “supervisor”, and we show how these 
ideas apply to our frequency server.


3.2

Scaling it up  
This week’s work covers different ways in which programs using message passing between concurrent processes can be made to work at scale.

Scaling can mean:

using multiple cores, hosts and nodes
adding mutable bulk storage
using the OTP platform … and accompanying concepts and tools
using other Erlang features
Use the comments here to discuss your understanding of what we mean by ‘scalability’ - and why this is important for building systems.


3.3

Multicore Erlang  
In this step we begin by looking at the first scaling mechanism in Erlang: the multicore version of the BEAM virtual machine.

We examine how multicore Erlang works, and the impact of this technology on scaling systems. 
We’ll set the context - modern processors, and the data centre - and we’ll examine various aspects 
of multicore Erlang such as its “black box” character, multiple run queues and work stealing.

In the next step we’ll look at how we can use this approach in practice.


3.4

Scaling the frequency server  View 30 comments
In this exercise we will look at how to scale up the frequency server.

Use the comments on this step to share your approaches and solutions, and to discuss how you might implement ‘replication’ in Erlang.

The supporting file frequency2.erl is available (as a zip file) under ‘Downloads’ below.

Scaling up
Suppose that the frequency server needs to serve more frequencies. It would be possible to do this just by having a longer
list of frequencies available, but it is likely that this scaling is required not only because more frequencies are needed 
but also because there are more requests to allocate and de-allocate them.

!!! image 1

The idea here is that we can “shard” the handling of the frequencies, so that multiple processes are used to handle different subsets of them.

---
Implementation
Design a shared server which has two (old) frequency servers running: one process will be handling the frequencies 10–15 and the other process 20–25.
In order for this to present the same API to its clients, you will also need to implement a front-end “router” process that will ensure that requests 
for allocation are routed to the appropriate server.

Obviously, a request to de-allocate a frequency will need to be routed to the appropriate back-end server, but what should be done in the case of 
allocation requests? Options include:

Alternately sending routing requests to one back-end server then the other.
Keeping a record in the front end of the number of frequencies remaining in each back-end server, and sending the allocation request to the 
server with the larger number; in the case of a tie another choice mechanism will be needed.
Replication
An alternative to sharding is to have two back end servers handling the whole set, and to (try to) maintain consistency between them. 
How would you implement this in Erlang?

Discussion
We would like to encourage you to use the comments on this step to discuss your solutions and your approaches to the replication question, 
as well as any practical experience you might have with scaling existing systems.


3.5

Distributed Erlang  View 3 comments
In distributed Erlang, we still have communication between processes, but now this is potentially on different hosts.

In this step we’ll look at how Erlang can be distributed across multiple computers, seeking to understand the basics 
of distributed Erlang and how it is used to implement systems. We’ll consider the limitations of distributed Erlang - 
security, transport - and the possibilities for Erlang “in the cloud”.

In the next step we’ll discuss how we can use this approach in practice.


3.6

Scaling out the frequency server
In this discussion, we’ll look to consolidate our understanding of different approaches to “scaling out” a practical problem.

Use the comments on this step to discuss:

How could distributed Erlang be used to support scalability of a frequency server?

How would the multi-process approach be adapted to work in a distributed context?


3.7 

To conclude this activity we’ll take a quick look at how to handle the bulk storage of data in Erlang.

We’ll first set the context of how to keep a notion of state in an Erlang program:

As a parameter value in a tail recursion
As a value “in flight” as part of a message
In a persistent table or a database
We’ll consider ETS and DETS tables, and their different formats (such as set) and APIs, and finally we’ll discuss
 how these approaches can be applied to keeping the state of a frequency server.

That’s the end of this activity on mutlicore and distributed Erlang; next we’re going to look at OTP, 
the Open Telecom Platform that powers most Erlang systems with its reusable generic components.